#!/bin/bash
# procmap
# https://github.com/kaiwan/procmap
#
# Part of the 'procmap' project.
# This bash script forms the userspace component of the 'procmap' project.
#
# The procmap project's intention is simply this: given a process's PID, it will
# display (in a CLI/console output format only for now) a complete 'memory map'
# of the process VAS (virtual address space).
# The memory map will consist of two major parts, ordered by descending virtual
# address:
#
#  Kernel VAS / kernel segment
#  Userspace mappings (or segments)
#
# The kernel segment details will be realized by inserting (insmod(8)) the kernel
# component of this project, the LKM (Loadable Kernel Module) named procmap. It's
# output will then be parsed in and 'drawn' first.
#
# The user mode mappings (or 'segments') will be realized and displayed by the
# majority of the code of this bash script.
#
# Thus, we obtain a full 'picture', a COMPLETE MEMORY MAP of the given process's
# VAS (Virtual Address Space)!
# 
# Common terms:
#  kva = kernel virtual address
#  uva =   user virtual address
#
# Note:- BSD has a utility by the same name: procmap(1), this project isn't
# the same, though (quite obviously) some aspects are similar.
#  (it's man page: https://man.openbsd.org/procmap.1)
#
# Project URL:
# https://github.com/kaiwan/procmap
#
# Run this program; it invokes the other scripts as required.
# Author:
# Kaiwan N Billimoria
# kaiwan -at- kaiwantech -dot- com
# kaiwan -dot- billimoria -at- gmail -dot- com
# kaiwanTECH
#
# License: MIT.
#set -x

# Turn on unofficial Bash 'strict mode'! V useful
# "Convert many kinds of hidden, intermittent, or subtle bugs into immediate, glaringly obvious errors"
# ref: http://redsymbol.net/articles/unofficial-bash-strict-mode/
set -euo pipefail

export name=procmap
PDIR=$(which $0)
[ -z "${PDIR}" ] && PDIR=$(dirname $0)  # true if procmap isn't in PATH
export PFX=$(dirname ${PDIR})    # dir in which this script and tools reside
export PAGE_SIZE=$(getconf PAGE_SIZE) # for the --only-user case

SCRATCHFILE=${PFX}/.scratchfile
rm -f ${SCRATCHFILE}
touch ${SCRATCHFILE}
mkdir -p /tmp/${name} 2>/dev/null

source ${PFX}/common.sh || {
 echo "${name}: fatal: could not source file '${PFX}/common.sh', aborting..."
 exit 1
}
verify_utils_present

source ${PFX}/config || {
 echo "${name}: fatal: could not source configuration in file '${PFX}/config', aborting..."
 exit 1
}
# leverage PS4 to show func, line#, etc when debugging!
[ ${DEBUG} -eq 1 ] && export PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

source ${PFX}/lib_procmap.sh || {
 echo "${name}: fatal: could not source ${PFX}/lib_procmap.sh , aborting..."
 exit 1
}


logfile_post_process()
{
sed -i.bkp "/###\:\:\:/d" ${1}  # take a backup & get rid of the signature line
sed -i "s/\x1b....//g" ${1}    # get rid of the ^[(B^[[m characters !
      # '\x1b' is ESC ! Find it, and then delete it and the following 4 chars
      # (the 4 .'s that follow specify this)
sed -i "s/\x1m.//g" ${1}
# get rid of the color characters !
sed -i "s/^\;166m//g" ${1}
sed -i "s/^mm//g" ${1}
sed -i "s/^5\;166m//g" ${1}
sed -i "s/47m//g" ${1}
#[ ${DEBUG} -eq 0 ] && rm -f sed*
}

usage()
{
 cat >/tmp/.ph << @EOF@
Usage: ${name} [options] -p PID (OR --pid=PID-of-process-to-show-memory-map-of)

The only *required* option switch is -p|--pid followed by the PID of the process

The following option switches are all optional:
 -u|--only-user  : show ONLY the user mode mappings or segments (not kernel VAS)
 -k|--only-kernel: show ONLY the kernel-space mappings or segments (not user VAS)
   [-u and -k are mutually exclusive and the default is to show BOTH]
 --export-maps=filename
                 : write all map information gleaned to the file you specify in CSV
 --export-kernel=filename
                 : write kernel information gleaned to the file you specify in CSV
 -v|--verbose    : verbose mode (try it! see below for details)
 -d|--debug      : run in debug mode
 --ver|--version : display version info
 -h|--help       : display this help screen.

See the config file as well.

*Verbose* mode (--verbose):
 Most verbose messages are prepended with '[v]' to help you identify them
In addition to the 'usual' stuff, the output now includes:
 - kernel segment details (prior to showing the kernel VAS); useful for system
   developers/BSP
 - progress messages
 - a header/footer legend for the mappings
 - at the end, if userspace view included, upon the process executable in
   question, we perform an ls -l, file, ldd commands.

-----------------------------
Caveats / Limitations:
-----------------------------
- This utility is in development and is continually
  evolving. As of now, in terms of the precise arch-specific kernel
  memory layout specifics, it's almost certainly incomplete. For example, as of
  now we don't (can't?) show every kernel mapping as documented in the kernel
  (for the x86_64, here: Documentation/x86/x86_64/mm.rst); f.e., the kernel
  vmemmap region, guard hole, etc are not shown explcitly - they are simply
  within one of the sparse regions on the map.

- procmap currently supports the following CPU arch's:
  x86_64, AArch32, AArch64; other archs - could use help

- running procmap on arch's other than x86_64:
  TL;DR: you might need to cross-compile the procmap kernel module (under
  procmap/procmap_kernel dir) yourself and copy it over to the target device
  under the same directory (details: see the README.md pl)

- requires root (sudo) access

- kernel mappings: the precise 'mode' (perms) of each mapping being unclear (to
  me), I simply put in what seems logical (but am unsure of it's accuracy).
  Knowledgeable persons, pl help!

@EOF@
cat /tmp/.ph 1>&2
rm -f /tmp/.ph
}

### To FIX:
# --locate=<start-vaddr>,<length_KB> : locate a given region within the process VAS
#     start-vaddr : a virtual address in hexadecimal
#          length : length of the region to locate in KB

VER_MAJOR=0
VER_MINOR=5
PRJ_URL="https://github.com/kaiwan/procmap"
AUTHORS="Kaiwan N Billimoria"
ORG="kaiwanTECH (Designer Graphics)"
procmap_version()
{
  printf "${name} ${VER_MAJOR}.${VER_MINOR}, (c) ${AUTHORS}, ${ORG}\n"
  printf "${PRJ_URL}\n"
}

# Parameters:
#  $1    : if 1 show the 'usage' text
#  $2... : error message
err()
{
  [ $# -lt 2 ] && return
  local show_usage=$1
  shift
  tput bold; fg_red
  printf "%s\n" "$@" >&2
  color_reset
  [ ${show_usage} -eq 1 ] && {
     echo; usage
  }
  exit 1
}

show_selected_opt()
{
  [ $# -eq 0 ] && return
  fg_yellow
  printf "%s\n" "$@"
  color_reset
}

# Parameter: PID of the process
validity_checks()
{
[[ $# -ne 1 ]] && return
# validity checks on PID
rgx='^[0-9]+$'
if ! [[ ${PID} =~ ${rgx} ]] ; then
 err 0 "Error: Invalid PID (must be a positive integer)"
fi
[ ${PID} -eq 0 ] && {
 err 0 "Specifying a valid PID with -p|--pid=<PID> is mandatory"
 }
[ ! -f ${PFX}/do_vgraph.sh ] && {
 err 0 "${name}: ${PFX}/do_vgraph.sh missing? Aborting..."
 }
[ ! -f ${PFX}/mapsfile_prep.sh ] && {
 err 0 "${name}: ${PFX}/mapsfile_prep.sh missing? Aborting..."
 }
#---
# Musn't use sudo as far as is possible, thus allowing regular users to view
# their own processes's user VAS
#---
# Check for process existence
ps -LA|grep -w ${PID} >/dev/null 2>&1 || {
 err 0 "${name}: process/thread with PID \"${PID}\" is invalid (or dead now?) Aborting..."
 }
# Verify it's not a kernel thread
local pname
pname=$(grep "^Name" /proc/${PID}/status |cut -d: -f2|xargs)  #|xargs to trim whitespace!
ps aux|grep -w "\[${pname}\]" >/dev/null 2>&1 && {  # name in square brackets? it's a kthread
 err 0 "${name}: process with PID \"${PID}\" name \"[${pname}]\" is invalid; I believe it's a kernel thread. Aborting..."
} || true

# Do we own the process (or thread) PID? If we can send it signal 0, yes, else no
PROCESS_OWNER=0
kill -0 ${PID} 2>/dev/null && PROCESS_OWNER=1 || true

# If we don't own the process, we simply can't proceed...
[[ ${PROCESS_OWNER} -eq 0 ]] && err 0 "FATAL: you don't own the process (or thread) with PID ${PID}
Either run this util as root or only upon processes (or threads) you own" || true
}

# Parameter: PID of the process
validate_pid()
{
	[[ $# -ne 1 ]] && return
	validity_checks ${PID}
#echo "1 PID=${PID}"

	# Is it a thread of a process?
	set +e
	isathread ${PID}
	[[ $? -eq 1 ]] && {
		ITS_A_THREAD=1
		show_selected_opt "[i] will display memory map for thread ${PID} of process ${PARENT_PROCESS}"
	} || {
		show_selected_opt "[i] will display memory map for process PID=${PID}"
	}
	set -e
	#echo "-p passed; PID=${PID}"
}


#--- 'main' here

[ $# -lt 1 ] && {
 usage
 exit 0
}

PID=0
export ITS_A_THREAD=0
XKERN_FILE=""

# ref: https://www.geeksforgeeks.org/getopts-command-in-linux-with-examples/
optspec=":p:ukvdh?-:"
while getopts "${optspec}" opt
do
    #echo "opt = ${opt}"
    case "${opt}" in
	p) #echo "-p passed; pid=${OPTARG}"
	   PID=${OPTARG}
	   validate_pid ${PID}
	   ;;
	u) show_selected_opt "[i] will display ONLY user VAS"
	   export SHOW_KERNELSEG=0
	   [[ ${SHOW_USERSPACE} -eq 0 ]] && {
	     echo "The -u and -k options are mutually exclusive" ; exit 1
	   }
	   ;;
	k) show_selected_opt "[i] will display ONLY kernel VAS"
	   export SHOW_USERSPACE=0
	   [[ ${SHOW_KERNELSEG} -eq 0 ]] && {
	     echo "The -u and -k options are mutually exclusive" ; exit 1
	   }
	   ;;
	v) export VERBOSE=1
	   show_selected_opt "[i] running in VERBOSE mode"
	   ;;
	d) export DEBUG=1
	   show_selected_opt "[i] running in DEBUG mode"
	   ;;
	h) usage ; exit 0
	   ;;
	-)                       # 'long' opts '--xxx' style, ala checksec!
 #echo "optarg = ${OPTARG}"
 #prompt
	    case "${OPTARG}" in
		  pid=*)
			PID=$(echo "${OPTARG}" |cut -d"=" -f2)
			validate_pid ${PID}
		    ;;
		  only-user)
			show_selected_opt "[i] will display ONLY user VAS"
			SHOW_KERNELSEG=0
		    ;;
		  only-kernel)
		    show_selected_opt "[i] will display ONLY kernel VAS"
			SHOW_USERSPACE=0
		    ;;
		  export-maps=*)
			XMAP_FILE=$(echo "${OPTARG}" |cut -d"=" -f2)
			[ -z "${XMAP_FILE}" ] && {
				err 0 "${name}: pl specify the filename for the --export-maps=<filename> option"
			}
			[ -f ${XMAP_FILE} ] && {
				err 0 "${name}: specified filename for --export-maps=<filename> option already exists, aborting..."
			}
			touch ${XMAP_FILE} || {
				err 0 "${name}: cannot create/write to specified file \"${XMAP_FILE}\", pl re-specify it or adjust permissions"
			}
		    show_selected_opt "[i] will write all map info to ${XMAP_FILE} (CSV)"
			# Write 'scratch' data that we require in other support scripts here..
			cat >> ${SCRATCHFILE} << @EOF@
XMAP_FILE=${XMAP_FILE}
@EOF@
		    ;;
		  export-kernel=*)
	 	        XKERN_FILE=$(echo "${OPTARG}" |cut -d"=" -f2)
			[ -z "${XKERN_FILE}" ] && {
				err 0 "${name}: pl specify the filename for the --export-kernel=<filename> option"
			}
			[ -f ${XKERN_FILE} ] && {
				err 0 "${name}: specified filename for --export-kernel=<filename> option already exists, aborting..."
			}
			touch ${XKERN_FILE} || {
					err 0 "${name}: cannot create/write to specified file \"${XKERN_FILE}\", pl re-specify it or adjust permissions"
			}
		    show_selected_opt "[i] will write kernel info to ${XKERN_FILE} (CSV)"
			# Write 'scratch' data that we require in other support scripts here..
			cat >> ${SCRATCHFILE} << @EOF@
XKERN_FILE=${XKERN_FILE}
@EOF@
		    ;;
		  locate=*)
			LOCATE_SPEC=${OPTARG:7}  # cut out the 'locate=' beginning
			LOC_STARTADDR=$(echo "${LOCATE_SPEC}" |cut -d, -f1)
			# Validity check; expect the vaddr to be in hex (0x....)
			[ "${LOC_STARTADDR:0:2}" != "0x" ] && {
				err 0 "${name}: the start virtual address Must be specified as a hexadecimal qty (0x....)"
			}
			# validate that a length has actually been passed
			LOC_LEN=$(echo "${LOCATE_SPEC}" |cut -d, -f2)
			decho "LOC_LEN = ${LOC_LEN}"
			[[ ( -z "${LOC_LEN}" ) || ( ${LOC_LEN} -le 0 ) ]] && {
				err 0 "${name}: the length of the virtual address region to locate must be positive (KB)"
			}
			show_selected_opt "[i] locate region from (${LOCATE_SPEC}) (start-vaddr,len-in-Kb)"
			;;
		  verbose)
			export VERBOSE=1
			show_selected_opt "[i] running in VERBOSE mode"
			;;
		  debug)
			export DEBUG=1
			show_selected_opt "[i] running in DEBUG mode"
			;;
		  ver|version)
		    procmap_version
			exit 0
			;;
		  help)
		    usage
			exit 0
			;;
		  *) err 1 "Unknown option '${OPTARG}'"
			;;
  	        esac
  	esac
done
shift $((OPTIND-1))

[[ ${PID} -eq 0 ]] && err 0 "Error: Invalid PID (must be a positive integer)"

LOG=log_procmap.txt
TMPCSV=/tmp/${name}/vgrph.csv

## TODO : why call these now??
init_kernel_lkm_get_details |tee -a ${LOG} || true
get_machine_set_arch_config |tee -a ${LOG} || true

# Invoke the prep_mapsfile script to prep the memory map file
${PFX}/mapsfile_prep.sh ${PID} ${TMPCSV} || exit 1

source ${ARCHFILE}
if [ "${ARCH}" = "Aarch32" ]; then
   sed --in-place '1d' ${TMPCSV}  # rm 1st line [vectors] mapping
fi

cat >> ${SCRATCHFILE} << @EOF@
SHOW_KERNELSEG=${SHOW_KERNELSEG}
SHOW_USERSPACE=${SHOW_USERSPACE}
@EOF@

# Invoke the worker script to 'draw' the memory map
#  Usage: do_vgraph [-d] -p PID-of-process -f input-CSV-filename(5 column format)
#  -v : run in verbose mode
#  -d : run in debug mode"
dovg_cmdline="-p ${PID} -f ${TMPCSV}"
[ ${DEBUG} -eq 1 ] && {
   dovg_cmdline="${dovg_cmdline} -d"
   export PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
}
[ ${VERBOSE} -eq 1 ] && dovg_cmdline="${dovg_cmdline} -v"
[ ${SHOW_KERNELSEG} -eq 1 ] && dovg_cmdline="${dovg_cmdline} -k"
[ ${SHOW_USERSPACE} -eq 1 ] && dovg_cmdline="${dovg_cmdline} -u"
[ ! -z "${LOCATE_SPEC}" ] && dovg_cmdline="${dovg_cmdline} -l ${LOCATE_SPEC}"

${PFX}/do_vgraph.sh ${dovg_cmdline} | tee -a ${LOG} || true

[ ${DEBUG} -eq 0 ] && rm -f ${TMPCSV}
if [ ${WRITELOG} -eq 1 ]; then
   logfile_post_process ${LOG}
   echo "$(date): output logged (appended) here :"
   ls -lh ${LOG}
fi

[ ${DEBUG} -eq 0 ] && {
  rm -f ${SCRATCHFILE}
  rm -rf /tmp/${name}
}

exit 0
